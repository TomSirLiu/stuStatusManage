<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.sirLiu.dao.GradeMapper">
    <resultMap id="BaseResultMap" type="cn.sirLiu.model.Grade">
        <constructor>
            <idArg column="stu_id" jdbcType="INTEGER" javaType="java.lang.Integer"/>
            <idArg column="course_id" jdbcType="INTEGER" javaType="java.lang.Integer"/>
            <arg column="schedule_time" jdbcType="TIMESTAMP" javaType="java.util.Date"/>
            <arg column="grade" jdbcType="INTEGER" javaType="java.lang.Integer"/>
        </constructor>
    </resultMap>
    <resultMap id="GroupByStuIDMap" type="java.util.Map">
        <result column="stu_id" property="stuID" jdbcType="INTEGER"/>
        <result column="stu_name" property="stuName" jdbcType="VARCHAR"/>
        <result column="course_id" property="courseID" jdbcType="INTEGER"/>
        <result column="course_name" property="courseName" jdbcType="VARCHAR"/>
        <result column="course_top_limit" property="courseTopLimit" jdbcType="INTEGER"/>
        <result column="course_type" property="courseType" jdbcType="VARCHAR"/>
        <result column="teacher_name" property="teacherName" jdbcType="VARCHAR"/>
        <result column="total_score" property="grade" jdbcType="INTEGER"/>
    </resultMap>
    <resultMap id="selectGradeJsonMap" type="java.util.Map">
        <result column="stu_id" property="stuID" jdbcType="INTEGER"/>
        <result column="stu_name" property="stuName" jdbcType="VARCHAR"/>
        <result column="course_id" property="courseID" jdbcType="INTEGER"/>
        <result column="course_name" property="courseName" jdbcType="VARCHAR"/>
        <result column="course_top_limit" property="courseTopLimit" jdbcType="INTEGER"/>
        <result column="course_type" property="courseType" jdbcType="VARCHAR"/>
        <result column="teacher_name" property="teacherName" jdbcType="VARCHAR"/>
        <result column="grade" property="grade" jdbcType="INTEGER"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    stu_id, course_id, schedule_time, grade
  </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.sirLiu.model.GradeExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from grade
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectSumGradeByGroupStuID" resultMap="GroupByStuIDMap">
        SELECT
      student.stu_id,
      student.stu_name,
      course.course_id,
      course.course_name,
      course.course_top_limit,
      course.course_type,
      teacher.teacher_name,
      sum(grade) AS total_score
    FROM grade, student, course, teacher
    WHERE grade.stu_id = student.stu_id AND grade.course_id = course.course_id AND course.teacher_id = teacher.teacher_id
    GROUP BY grade.stu_id
    ORDER BY total_score DESC;
  </select>
    <select id="selectGradeJson" resultMap="selectGradeJsonMap" >
        SELECT
        student.stu_id,
        student.stu_name,
        course.course_id,
        course.course_name,
        course.course_top_limit,
        course.course_type,
        teacher.teacher_name,
        grade.grade
        FROM grade, student, course, teacher
        WHERE grade.stu_id = student.stu_id AND grade.course_id = course.course_id AND course.teacher_id = teacher.teacher_id
        <if test="stuID != null">
            AND student.stu_id = #{stuID}
        </if>
        <if test="courseID != null">
            AND course.course_id = #{courseID}
        </if>
        ORDER BY grade.grade DESC;
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="cn.sirLiu.model.GradeKey">
        select
        <include refid="Base_Column_List"/>
        from grade
        where stu_id = #{stuId,jdbcType=INTEGER}
        and course_id = #{courseId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="cn.sirLiu.model.GradeKey">
    delete from grade
    where stu_id = #{stuId,jdbcType=INTEGER}
      and course_id = #{courseId,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="cn.sirLiu.model.GradeExample">
        delete from grade
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="cn.sirLiu.model.Grade">
    insert into grade (stu_id, course_id, schedule_time, 
      grade)
    values (#{stuId,jdbcType=INTEGER}, #{courseId,jdbcType=INTEGER}, #{scheduleTime,jdbcType=TIMESTAMP}, 
      #{grade,jdbcType=INTEGER})
  </insert>
    <insert id="insertSelective" parameterType="cn.sirLiu.model.Grade">
        insert into grade
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="stuId != null">
                stu_id,
            </if>
            <if test="courseId != null">
                course_id,
            </if>
            <if test="scheduleTime != null">
                schedule_time,
            </if>
            <if test="grade != null">
                grade,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="stuId != null">
                #{stuId,jdbcType=INTEGER},
            </if>
            <if test="courseId != null">
                #{courseId,jdbcType=INTEGER},
            </if>
            <if test="scheduleTime != null">
                #{scheduleTime,jdbcType=TIMESTAMP},
            </if>
            <if test="grade != null">
                #{grade,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="cn.sirLiu.model.GradeExample" resultType="java.lang.Integer">
        select count(*) from grade
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update grade
        <set>
            <if test="record.stuId != null">
                stu_id = #{record.stuId,jdbcType=INTEGER},
            </if>
            <if test="record.courseId != null">
                course_id = #{record.courseId,jdbcType=INTEGER},
            </if>
            <if test="record.scheduleTime != null">
                schedule_time = #{record.scheduleTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.grade != null">
                grade = #{record.grade,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update grade
        set stu_id = #{record.stuId,jdbcType=INTEGER},
        course_id = #{record.courseId,jdbcType=INTEGER},
        schedule_time = #{record.scheduleTime,jdbcType=TIMESTAMP},
        grade = #{record.grade,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="cn.sirLiu.model.Grade">
        update grade
        <set>
            <if test="scheduleTime != null">
                schedule_time = #{scheduleTime,jdbcType=TIMESTAMP},
            </if>
            <if test="grade != null">
                grade = #{grade,jdbcType=INTEGER},
            </if>
        </set>
        where stu_id = #{stuId,jdbcType=INTEGER}
        and course_id = #{courseId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="cn.sirLiu.model.Grade">
    update grade
    set schedule_time = #{scheduleTime,jdbcType=TIMESTAMP},
      grade = #{grade,jdbcType=INTEGER}
    where stu_id = #{stuId,jdbcType=INTEGER}
      and course_id = #{courseId,jdbcType=INTEGER}
  </update>
</mapper>